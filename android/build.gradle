apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'idea'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'


buildscript {
    ext.kotlin_version = '1.3.71'
    ext.jna_version = '5.6.0'
    ext.android_gradle_plugin_version = '3.6.0'
    ext.android_components_version = '47.0.0'

    ext.build = [
            ndkVersion: "21.3.6528147", // Keep it in sync in TC Dockerfile.
            compileSdkVersion: 29,
            targetSdkVersion: 28,
            minSdkVersion: 21, // So that we can publish for aarch64.
            // This is required to support new AndroidX support libraries.
            // See mozilla-mobile/android-components#842
            jvmTargetCompatibility: "1.8",
    ]

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://maven.mozilla.org/maven2"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_gradle_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Publish.
        classpath 'digital.wup:android-maven-publish:3.6.2'

        // rust-android-gradle needed to run cargo build
        classpath 'gradle.plugin.org.mozilla.rust-android-gradle:plugin:0.8.3'
    }
}

dependencies {
    implementation "net.java.dev.jna:jna:$jna_version@aar"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    kotlin_version
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }

    externalNativeBuild {
      cmake {
        path "../csrc/CMakeLists.txt"
      }
    }

    // This is required to support new AndroidX support libraries.
    // See mozilla-mobile/android-components#842
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        test.jniLibs.srcDirs += "$buildDir/rustJniLibs/desktop"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://maven.mozilla.org/maven2"
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation "net.java.dev.jna:jna:$jna_version@aar"
    }
}

ext.rustTargets = [
        //'arm',
        'arm64',
        //'x86_64',
        //'x86',
]

cargo {
    // The directory of the Cargo.toml to build.
    module = '../'

    // The Android NDK API level to target.
    apiLevel = 29

    // Where Cargo writes its outputs.
    targetDirectory = '../target'

    // This is the name of the library that the kotlin code
    // must use to import the native code
    libname = 'broken'

    // The Cargo targets to invoke.  The mapping from short name to target
    // triple is defined by the `rust-android-gradle` plugin.
    targets = rustTargets

    // Perform release builds (which should have debug info, due to
    // `debug = true` in Cargo.toml).
    profile = "release"

    extraCargoBuildArguments = []
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["merge${productFlavor}${buildType}JniLibFolders"].dependsOn(tasks["cargoBuild"])

        // For unit tests.
        tasks["process${productFlavor}${buildType}UnitTestJavaRes"].dependsOn(tasks["cargoBuild"])
    }
}

allprojects {
    group = "org.mozilla.appservices.broken"
    apply plugin: 'digital.wup.android-maven-publish'
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId = "org.mozilla.appservices"
      artifactId = "broken"
      version = "0.1"
      project.afterEvaluate {
        from components.findByName("androidRelease")
      }
    } 
  }
}
